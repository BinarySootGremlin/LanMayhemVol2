@include "hl2mp.fgd"
 
@PointClass base(Origin, Angles) studio("models/props_combine/combine_mine01.mdl") = item_itemspawner :
	"A spawner with light and a floating item."
[
	item(pointentityclass) : "Item to spawn" : "item_healthvial" : "The name of an Item to spawn."
	respawntime(float) : "Respawn time" : "10.0" : "Time it takes for the item to respawn."
	spawnflags(Flags) =
	[
		1 : "Spawn without model" : 0
		2 : "Spawn without light" : 0
	]
]

@PointClass base(Item) studio("models/props_lab/labpart.mdl") = item_speedvial : 
	"Speed vial." 
[
	speedtogive(float) : "Speed increase" : "100.0" : "Amount which will be added to the speed of the player."
]

@PointClass base(Item) studio("models/items/hevsuit.mdl") = item_superarmor : "Super Armor."
[
	maxarmor(integer) : "Max armor" : 200 : "Maxmimum armor the player can get from this."
]

@PointClass base(Origin, Angles) studio("models/props_combine/combine_mine01.mdl") = item_weaponspawner :
	"A weapon spawner with light and a floating item."
[
	weapon(choices) : "Weapons" : "weapon_smg1" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "Assault Rifle 2"
		"weapon_rpg" : "Missile Launcher"
		"weapon_smg1" : "SMG1"
		"weapon_357" : "357"
		"weapon_crossbow" : "Crossbow"
		"weapon_shotgun" : "Shotgun"
		"weapon_frag" : "Frag Grenade"
		"weapon_hopwire" : "Vortex Grenade"
	]
	respawntime(float) : "Respawn time" : "10.0" : "Time it takes for the weapon to respawn."
	spawnflags(Flags) =
	[
		1 : "Spawn without model" : 0
		2 : "Spawn without light" : 0
	]
]

@SolidClass base(Trigger) = trigger_racestart : 
	"Area which will not start a racetimer."
[
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_racegoal : 
	"Aread which will teleport player back and display the racetime."
[
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_respawn : 
	"Area which will respawn any player who touches it."
[
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_gravitychange : 
	"Will change the gravity of a player on endtouch."
[
	gravity(integer) : "New gravity" : 1 : "New gravity value"
	//gravitydir(angle) : "Gravity change direction" : "0 0 0" : "Angles indicating the direction where the player has to leave the trigger in order to get a new gravity."
	
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]